using Wavee.Core.Crypto;
using Xunit;

namespace Wavee.Tests.Core.Crypto;

/// <summary>
/// CRITICAL VALIDATION: Tests ShannonCipher against real test vectors
/// generated by librespot's Rust implementation (shannon crate 0.2.0).
///
/// These tests verify that our C# implementation produces EXACTLY the same
/// output as librespot for the same inputs, ensuring protocol compatibility.
/// </summary>
public class ShannonCipherLibrespotTests
{
    private readonly ITestOutputHelper _output;

    public ShannonCipherLibrespotTests(ITestOutputHelper output)
    {
        _output = output;
    }

    /// <summary>
    /// Test key used for all librespot test vectors.
    /// Generated: cargo run --example generate_shannon_vectors
    /// </summary>
    private static readonly byte[] TestKey = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
    ];

    /// <summary>
    /// Ground truth test vector from librespot (TEST CASE 1).
    /// Verifies basic encryption with nonce 0.
    /// </summary>
    [Fact]
    public void Encrypt_LibrespotVector1_ShouldMatchExactly()
    {
        // Arrange - Test vector from librespot
        uint nonce = 0;
        byte[] plaintext = [0x01, 0x02, 0x03, 0x04];
        byte[] expectedEncrypted = [0xcb, 0x7f, 0xea, 0x2f];
        byte[] expectedMac = [0x80, 0x3a, 0x07, 0x7f];

        // Act
        var cipher = new ShannonCipher(TestKey);
        cipher.NonceU32(nonce);

        byte[] encrypted = (byte[])plaintext.Clone();
        cipher.Encrypt(encrypted);

        byte[] mac = new byte[4];
        cipher.Finish(mac);

        // Assert
        Assert.Equal(expectedEncrypted, encrypted);
        Assert.Equal(expectedMac, mac);

        _output.WriteLine("✅ VALIDATION PASSED: Basic encryption matches librespot!");
        _output.WriteLine($"Nonce:     {nonce}");
        _output.WriteLine($"Plaintext: {BytesToHex(plaintext)}");
        _output.WriteLine($"Encrypted: {BytesToHex(encrypted)}");
        _output.WriteLine($"MAC:       {BytesToHex(mac)}");
    }

    /// <summary>
    /// Test vector with different nonce (TEST CASE 2).
    /// Verifies nonce handling changes the keystream.
    /// </summary>
    [Fact]
    public void Encrypt_DifferentNonce_ShouldMatchLibrespot()
    {
        // Arrange - Test vector from librespot with nonce 1
        uint nonce = 1;
        byte[] plaintext = [0x01, 0x02, 0x03, 0x04];
        byte[] expectedEncrypted = [0xba, 0x95, 0x25, 0xab];
        byte[] expectedMac = [0xae, 0x02, 0xa2, 0xc0];

        // Act
        var cipher = new ShannonCipher(TestKey);
        cipher.NonceU32(nonce);

        byte[] encrypted = (byte[])plaintext.Clone();
        cipher.Encrypt(encrypted);

        byte[] mac = new byte[4];
        cipher.Finish(mac);

        // Assert
        Assert.Equal(expectedEncrypted, encrypted);
        Assert.Equal(expectedMac, mac);

        _output.WriteLine("✅ Different nonce produces different output (matches librespot)");
        _output.WriteLine($"Nonce:     {nonce}");
        _output.WriteLine($"Encrypted: {BytesToHex(encrypted)}");
        _output.WriteLine($"MAC:       {BytesToHex(mac)}");
    }

    /// <summary>
    /// Test vector with empty data (TEST CASE 3).
    /// Verifies MAC generation works with zero-length input.
    /// </summary>
    [Fact]
    public void Encrypt_EmptyData_ShouldMatchLibrespot()
    {
        // Arrange - Test vector from librespot with empty data
        uint nonce = 0;
        byte[] plaintext = [];
        byte[] expectedMac = [0x0a, 0xab, 0x57, 0x02];

        // Act
        var cipher = new ShannonCipher(TestKey);
        cipher.NonceU32(nonce);

        byte[] encrypted = (byte[])plaintext.Clone();
        cipher.Encrypt(encrypted);

        byte[] mac = new byte[4];
        cipher.Finish(mac);

        // Assert
        Assert.Empty(encrypted);
        Assert.Equal(expectedMac, mac);

        _output.WriteLine("✅ Empty data MAC matches librespot!");
        _output.WriteLine($"MAC: {BytesToHex(mac)}");
    }

    /// <summary>
    /// Test vector with non-word-aligned data (TEST CASE 4).
    /// 13 bytes = "Hello, World!" - tests partial word handling.
    /// </summary>
    [Fact]
    public void Encrypt_NonWordAligned_ShouldMatchLibrespot()
    {
        // Arrange - Test vector from librespot: "Hello, World!" (13 bytes)
        uint nonce = 0;
        byte[] plaintext = [0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21];
        byte[] expectedEncrypted = [0x82, 0x18, 0x85, 0x47, 0x57, 0x85, 0xea, 0x2e, 0xae, 0x01, 0x7e, 0xfe, 0xbe];
        byte[] expectedMac = [0x81, 0x49, 0x3f, 0x7e];

        // Act
        var cipher = new ShannonCipher(TestKey);
        cipher.NonceU32(nonce);

        byte[] encrypted = (byte[])plaintext.Clone();
        cipher.Encrypt(encrypted);

        byte[] mac = new byte[4];
        cipher.Finish(mac);

        // Assert
        Assert.Equal(expectedEncrypted, encrypted);
        Assert.Equal(expectedMac, mac);

        _output.WriteLine("✅ Non-word-aligned data matches librespot!");
        _output.WriteLine($"Plaintext: {System.Text.Encoding.UTF8.GetString(plaintext)}");
        _output.WriteLine($"Encrypted: {BytesToHex(encrypted)}");
        _output.WriteLine($"MAC:       {BytesToHex(mac)}");
    }

    /// <summary>
    /// Test vector for ApCodec-style packet (TEST CASE 5).
    /// Packet format: [cmd: 1 byte][length: 2 bytes BE][payload: N bytes]
    /// This matches how Spotify protocol packets are encrypted.
    /// </summary>
    [Fact]
    public void Encrypt_ApCodecStylePacket_ShouldMatchLibrespot()
    {
        // Arrange - Test vector from librespot
        uint nonce = 0;
        byte cmd = 0x42;
        byte[] payload = [0xaa, 0xbb, 0xcc, 0xdd];

        // Build packet: [cmd][length BE][payload]
        byte[] packet = [0x42, 0x00, 0x04, 0xaa, 0xbb, 0xcc, 0xdd];
        byte[] expectedEncrypted = [0x88, 0x7d, 0xed, 0x81, 0x9f, 0x11, 0xf0];
        byte[] expectedMac = [0x27, 0xa1, 0xfc, 0x02];

        // Act
        var cipher = new ShannonCipher(TestKey);
        cipher.NonceU32(nonce);

        byte[] encrypted = (byte[])packet.Clone();
        cipher.Encrypt(encrypted);

        byte[] mac = new byte[4];
        cipher.Finish(mac);

        // Assert
        Assert.Equal(expectedEncrypted, encrypted);
        Assert.Equal(expectedMac, mac);

        _output.WriteLine("✅ ApCodec-style packet matches librespot!");
        _output.WriteLine($"Command:         0x{cmd:X2}");
        _output.WriteLine($"Payload:         {BytesToHex(payload)}");
        _output.WriteLine($"Packet (plain):  {BytesToHex(packet)}");
        _output.WriteLine($"Packet (enc):    {BytesToHex(encrypted)}");
        _output.WriteLine($"MAC:             {BytesToHex(mac)}");
    }

    /// <summary>
    /// Test sequential nonces (TEST CASE 6).
    /// Verifies that incrementing nonces produce different outputs.
    /// This is critical for Spotify protocol packet sequencing.
    /// </summary>
    [Theory]
    [InlineData(0u, new byte[] { 0xd8, 0x49, 0xbf, 0x53 }, new byte[] { 0xb2, 0x3d, 0xaf, 0x43 })]
    [InlineData(1u, new byte[] { 0xa9, 0xa3, 0x70, 0xd7 }, new byte[] { 0x1f, 0xb6, 0xf1, 0x9b })]
    [InlineData(2u, new byte[] { 0xdd, 0x3f, 0x13, 0x8e }, new byte[] { 0xf0, 0x78, 0x5c, 0x24 })]
    public void Encrypt_SequentialNonces_ShouldMatchLibrespot(uint nonce, byte[] expectedEncrypted, byte[] expectedMac)
    {
        // Arrange - Test data from librespot
        byte[] plaintext = [0x12, 0x34, 0x56, 0x78];

        // Act
        var cipher = new ShannonCipher(TestKey);
        cipher.NonceU32(nonce);

        byte[] encrypted = (byte[])plaintext.Clone();
        cipher.Encrypt(encrypted);

        byte[] mac = new byte[4];
        cipher.Finish(mac);

        // Assert
        Assert.Equal(expectedEncrypted, encrypted);
        Assert.Equal(expectedMac, mac);

        _output.WriteLine($"Nonce {nonce}: Encrypted={BytesToHex(encrypted)}, MAC={BytesToHex(mac)} ✅");
    }

    /// <summary>
    /// Test large data (TEST CASE 7).
    /// 100 bytes - tests multi-word processing.
    /// </summary>
    [Fact]
    public void Encrypt_LargeData_ShouldMatchLibrespot()
    {
        // Arrange - 100-byte test vector
        uint nonce = 0;
        byte[] plaintext = new byte[100];
        for (int i = 0; i < 100; i++)
            plaintext[i] = (byte)(i & 0xFF);

        // Expected first 32 bytes from librespot output
        byte[] expectedFirst32 = [
            0xca, 0x7c, 0xeb, 0x28, 0x6e, 0x95, 0x17, 0xed,
            0xc8, 0x3c, 0xd2, 0x8b, 0x9a, 0xe9, 0x2a, 0x5c,
            0x25, 0x3e, 0x58, 0x9a, 0x57, 0x3d, 0x30, 0x58,
            0x79, 0x41, 0x8d, 0xac, 0x83, 0x28, 0xf1, 0xa3
        ];

        byte[] expectedMac = [0x05, 0x88, 0x75, 0x07];

        // Act
        var cipher = new ShannonCipher(TestKey);
        cipher.NonceU32(nonce);

        byte[] encrypted = (byte[])plaintext.Clone();
        cipher.Encrypt(encrypted);

        byte[] mac = new byte[4];
        cipher.Finish(mac);

        // Assert
        Assert.Equal(expectedFirst32, encrypted[..32]);
        Assert.Equal(expectedMac, mac);

        _output.WriteLine("✅ Large data (100 bytes) matches librespot!");
        _output.WriteLine($"First 32 bytes: {BytesToHex(encrypted[..32])}");
        _output.WriteLine($"MAC:            {BytesToHex(mac)}");
    }

    /// <summary>
    /// Round-trip test: encrypt then decrypt should return plaintext.
    /// Uses librespot-validated vectors to ensure correctness.
    /// </summary>
    [Fact]
    public void EncryptDecrypt_RoundTrip_ShouldReturnPlaintext()
    {
        // Arrange
        uint nonce = 0;
        byte[] original = [0x01, 0x02, 0x03, 0x04];

        // Act - Encrypt
        var encryptor = new ShannonCipher(TestKey);
        encryptor.NonceU32(nonce);

        byte[] encrypted = (byte[])original.Clone();
        encryptor.Encrypt(encrypted);

        byte[] encryptorMac = new byte[4];
        encryptor.Finish(encryptorMac);

        // Decrypt (Shannon encrypt/decrypt are the same operation)
        var decryptor = new ShannonCipher(TestKey);
        decryptor.NonceU32(nonce);

        byte[] decrypted = (byte[])encrypted.Clone();
        decryptor.Decrypt(decrypted);

        byte[] decryptorMac = new byte[4];
        decryptor.Finish(decryptorMac);

        // Assert
        Assert.Equal(original, decrypted);
        Assert.Equal(encryptorMac, decryptorMac);

        _output.WriteLine("✅ Round-trip successful!");
        _output.WriteLine($"Original:  {BytesToHex(original)}");
        _output.WriteLine($"Encrypted: {BytesToHex(encrypted)}");
        _output.WriteLine($"Decrypted: {BytesToHex(decrypted)}");
    }

    /// <summary>
    /// Verify MAC check works correctly with valid MAC.
    /// </summary>
    [Fact]
    public void CheckMac_WithValidMac_ShouldNotThrow()
    {
        // Arrange - Use known valid MAC from librespot
        uint nonce = 0;
        byte[] data = [0x01, 0x02, 0x03, 0x04];
        byte[] expectedMac = [0x80, 0x3a, 0x07, 0x7f]; // From librespot test vector

        // Act
        var cipher = new ShannonCipher(TestKey);
        cipher.NonceU32(nonce);

        byte[] encrypted = (byte[])data.Clone();
        cipher.Encrypt(encrypted);

        // Assert - Should not throw
        var exception = Record.Exception(() => cipher.CheckMac(expectedMac));
        Assert.Null(exception);

        _output.WriteLine("✅ MAC verification passed (matches librespot)");
    }

    /// <summary>
    /// Verify MAC check fails with invalid MAC.
    /// </summary>
    [Fact]
    public void CheckMac_WithInvalidMac_ShouldThrow()
    {
        // Arrange
        uint nonce = 0;
        byte[] data = [0x01, 0x02, 0x03, 0x04];
        byte[] invalidMac = [0x00, 0x00, 0x00, 0x00]; // Wrong MAC

        // Act
        var cipher = new ShannonCipher(TestKey);
        cipher.NonceU32(nonce);

        byte[] encrypted = (byte[])data.Clone();
        cipher.Encrypt(encrypted);

        // Assert - Should throw
        Assert.Throws<InvalidDataException>(() => cipher.CheckMac(invalidMac));

        _output.WriteLine("✅ MAC verification correctly rejects invalid MAC");
    }

    #region Helper Methods

    private static string BytesToHex(byte[] bytes)
    {
        if (bytes.Length > 32)
            return BitConverter.ToString(bytes[..32]).Replace("-", " ").ToLower() + "...";

        return BitConverter.ToString(bytes).Replace("-", " ").ToLower();
    }

    #endregion
}
